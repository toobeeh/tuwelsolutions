var tws;(()=>{"use strict";var t={203:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{c(o.next(t))}catch(t){i(t)}}function u(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((o=o.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSolution=e.getSolutions=void 0,e.getSolutions=function(t){return n(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,fetch("https://tuwelsolution.xerus.at/solution/"+t)];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))},e.setSolution=function(t){return n(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,fetch("https://tuwelsolution.xerus.at/solution/save/",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return e.sent(),[2]}}))}))}},498:function(t,e){var n,o=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0}),e.TuwelMultianswerSolved=e.TuwelMultianswer=void 0;var r=function(){function t(t){var e,n=this;this.question=t;var o=t.querySelector(".formulation").cloneNode(!0);o.querySelectorAll(".subquestion").forEach((function(t){return t.remove()})),this.text=o.textContent,this.image=null===(e=t.querySelector("img"))||void 0===e?void 0:e.src.slice(0,1e4),this.answers=[],t.querySelectorAll(".subquestion select").forEach((function(t){var e=[];t.querySelectorAll("option").forEach((function(n){e.push({option:n,select:t})})),n.answers.push(e)}))}return t.prototype.matches=function(t){return"multianswer"==t.type&&t.text==this.text&&t.imgHash==this.image},t.prototype.solve=function(t){this.answers.forEach((function(e,n){e.forEach((function(e){e.option.selected=e.option.innerText==t.answers[n],e.option.selected&&(e.select.value=e.option.value)}))}))},t}();e.TuwelMultianswer=r;var i=function(t){function e(e){var n=t.call(this,e)||this,o=[];return e.querySelectorAll(".feedbackspan").forEach((function(t){o.push(t.innerHTML.split("<br>")[1].split(": ")[1])})),n.correctAnswers=o,n}return o(e,t),e.prototype.toJSON=function(){return{type:"multianswer",text:this.text,imgHash:this.image,answers:this.correctAnswers}},e}(r);e.TuwelMultianswerSolved=i},746:function(t,e){var n,o=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0}),e.TuwelMultichoiceSolved=e.TuwelMultichoice=void 0;var r=function(){function t(t){var e,n=this;this.question=t,this.text=t.querySelector(".qtext").innerText,this.image=null===(e=t.querySelector("img"))||void 0===e?void 0:e.src.slice(0,1e4),this.answers=[],t.querySelectorAll(".answer > div").forEach((function(t){n.answers.push({text:t.innerText,element:t.querySelector("input:nth-child(2)")})}))}return t.prototype.matches=function(t){return"multichoice"==t.type&&t.text==this.text&&t.imgHash==this.image},t.prototype.solve=function(t){this.answers.forEach((function(e){t.answers.some((function(t){return e.text==t}))&&e.element.click()}))},t}();e.TuwelMultichoice=r;var i=function(t){function e(e){var n=t.call(this,e)||this,o=e.querySelector(".rightanswer").innerText;return n.correctAnswers=[],n.answers.forEach((function(t){o.indexOf(t.text)>0&&n.correctAnswers.push(t.text)})),n}return o(e,t),e.prototype.toJSON=function(){return{type:"multichoice",text:this.text,imgHash:this.image,answers:this.correctAnswers}},e}(r);e.TuwelMultichoiceSolved=i},698:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{c(o.next(t))}catch(t){i(t)}}function u(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((o=o.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.setup=void 0;var i=n(203),s=n(498),u=n(746);e.setup=function(){var t=document.querySelector(".othernav"),e=document.createElement("a");e.href="#";var n=window.location.pathname.split("/").reverse()[0];"attempt.php"==n?(e.innerText="Load from tuwelsolutions",e.addEventListener("click",(function(){!function(){o(this,void 0,void 0,(function(){var t,e;return r(this,(function(n){switch(n.label){case 0:t=window.location.search.replace("?","").split("&").find((function(t){return t.indexOf("cmid")>=0})).replace("cmid=",""),e=void 0,n.label=1;case 1:return n.trys.push([1,3,,4]),[4,(0,i.getSolutions)(t)];case 2:return e=n.sent(),[3,4];case 3:return n.sent(),console.timeLog("No solutions for this quiz :/"),[2];case 4:return console.log("found solutions for this quiz: ",e),document.querySelectorAll(".que").forEach((function(t){if(t.classList.contains("multichoice")){var n=new u.TuwelMultichoice(t);null==e||e.questions.forEach((function(t){n.matches(t)&&(n.solve(t),console.log("solved a question:",n))}))}if(t.classList.contains("multianswer")){var o=new s.TuwelMultianswer(t);null==e||e.questions.forEach((function(t){o.matches(t)&&(o.solve(t),console.log("solved a question:",o))}))}})),console.log("solved all known questions"),[2]}}))}))}()})),t.appendChild(e)):"review.php"==n&&(e.innerText="Upload to tuwelsolutions",e.addEventListener("click",(function(){!function(){o(this,void 0,void 0,(function(){var t,e,n;return r(this,(function(o){switch(o.label){case 0:return t=window.location.search.replace("?","").split("&").find((function(t){return t.indexOf("cmid")>=0})).replace("cmid=",""),e=[],document.querySelectorAll(".que").forEach((function(t){t.classList.contains("multichoice")?e.push(new u.TuwelMultichoiceSolved(t).toJSON()):t.classList.contains("multianswer")&&e.push(new s.TuwelMultianswerSolved(t).toJSON())})),n={quiz:t,questions:e},[4,(0,i.setSolution)(n)];case 1:return o.sent(),console.log("posted solutions to server: ",n),[2]}}))}))}(),e.removeAttribute("href"),e.innerText="Uploaded solutions",e.style.pointerEvents="none"})),t.appendChild(e)),console.log("tuwelsolutions v1.0.1 running")}}},e={},n=function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}(698);tws=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,